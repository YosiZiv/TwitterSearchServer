{"version":3,"sources":["Components/Layout/TextInput.js","Components/Layout/DatePicker.js","Components/Layout/SelectInput.js","Components/Layout/Button.js","Components/Layout/Table.js","httpConfig.js","shared/utility.js","Components/Layout/Spinner.js","Components/Layout/EmbedTweet.js","Components/Pages/TwitterSearch.js","App.js","index.js","assets/twitter-logo.png"],"names":["TextInput","className","id","label","placeholder","value","onChange","errorsMessage","required","isTouch","concat","autoComplete","DatePickerComponent","handleTimeChange","date","minDate","maxDate","dateFormat","selected","SelectInput","languages","languageChangeHandler","options","Button","text","onClick","loading","disabled","Table","tweets","createTweetsTable","width","selectTweet","axios","Axios","create","baseURL","api","a","url","method","payload","get","response","post","formatDateForQuery","testDate","Date","getFullYear","getMonth","getDate","Spinner","class","role","EmbedTweet","selectedTweet","TwitterSearchPage","dateRange","now","useState","startDate","searchTwitterForm","setSearchTwitterForm","setTweets","noResult","setNoResult","setLoading","handleTweetSearch","hashtag","endDate","reqData","language","request","console","log","length","Number","filteredTweets","handleTweetSelect","tweet","tweetDom","document","getElementById","innerHTML","window","twttr","widgets","createTweet","theme","src","twitterLogo","alt","onSubmit","e","preventDefault","validation","isRequired","minLength","event","target","trim","maxLength","isString","checkValidity","handleInputChange","type","lang","map","tdArray","key","App","setLanguages","useEffect","languagesParse","JSON","parse","stringify","languageJson","ReactDOM","render","module","exports"],"mappings":"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","file":"static/js/main.c6803283.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./TextInput.css\";\r\nconst TextInput = ({\r\n  id,\r\n  label,\r\n  placeholder,\r\n  value,\r\n  onChange,\r\n  errorsMessage = null,\r\n  required = false,\r\n  isTouch = false\r\n}) => {\r\n  let className;\r\n  className = `form-control`.concat(errorsMessage && isTouch ? ` invalid` : ``);\r\n  return (\r\n    <div className='inputwrapper'>\r\n      <label className='textLabel'>\r\n        {required && <span className='text-danger'>*</span>} {label} :\r\n      </label>\r\n      <input\r\n        autoComplete='off'\r\n        id={id}\r\n        value={value}\r\n        onChange={onChange}\r\n        placeholder={placeholder}\r\n        className={className}\r\n      />\r\n      <div className='text-input-error-message'>\r\n        {errorsMessage && (\r\n          <small className='text-danger'>{errorsMessage}</small>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default TextInput;\r\n","import React from \"react\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport \"./DatePicker.css\";\r\nconst DatePickerComponent = ({\r\n  handleTimeChange,\r\n  date,\r\n  minDate,\r\n  maxDate,\r\n  id,\r\n  label\r\n}) => (\r\n  <div className='datePickerContainer'>\r\n    <label className='textLabel'>{label} :</label>\r\n    <div className='datePicker'>\r\n      <DatePicker\r\n        minDate={minDate}\r\n        maxDate={maxDate}\r\n        dateFormat='yyyy/MM/dd'\r\n        id={id}\r\n        selected={date}\r\n        onChange={handleTimeChange}\r\n      />\r\n    </div>\r\n  </div>\r\n);\r\nexport default DatePickerComponent;\r\n","import React from \"react\";\r\nimport Select from \"react-select\";\r\n\r\nconst SelectInput = ({ languages, languageChangeHandler, label }) => {\r\n  return (\r\n    <>\r\n      <label className='textLabel'>{label} :</label>\r\n      <Select onChange={languageChangeHandler} options={languages} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SelectInput;\r\n","import React from \"react\";\r\nimport \"./Button.css\";\r\nconst Button = ({ text, onClick, loading }) => (\r\n  <button disabled={loading} className='button' onClick={onClick}>\r\n    {text}\r\n  </button>\r\n);\r\nexport default Button;\r\n","import React from \"react\";\r\nimport \"./Table.css\";\r\nconst Table = ({ tweets, onClick, createTweetsTable, selectTweet }) => {\r\n  const width = selectTweet ? \"minWidth\" : \"fullWidth\";\r\n  return (\r\n    <>\r\n      <table className={width}>\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Date</th>\r\n            <th>Body</th>\r\n            <th>Retweets</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>{createTweetsTable(tweets, onClick)}</tbody>\r\n      </table>\r\n    </>\r\n  );\r\n};\r\nexport default Table;\r\n","import Axios from \"axios\";\r\n\r\n// \"http://localhost:4000/api\"\r\nconst axios = Axios.create({\r\n  baseURL: \"http://ec2-18-185-92-148.eu-central-1.compute.amazonaws.com/api\"\r\n});\r\nexport const api = async ({ url, method, payload = null }) => {\r\n  let response;\r\n  try {\r\n    if (method === \"GET\") {\r\n      response = await axios.get(url, payload);\r\n      return response;\r\n    } else {\r\n      response = await axios.post(url, payload);\r\n      return response;\r\n    }\r\n  } catch (err) {\r\n    throw err;\r\n  }\r\n};\r\n","export const checkValidity = (id, value, validation) => {\r\n  let errorsMessage = null;\r\n  if (!validation) {\r\n    return errorsMessage;\r\n  }\r\n\r\n  if (validation.isRequired && value.trim() === \"\") {\r\n    errorsMessage = `${id} field is require`;\r\n  }\r\n\r\n  if (validation.minLength && value.length < validation.minLength) {\r\n    errorsMessage = `${id} Required min ${validation.minLength}`;\r\n  }\r\n  if (validation.maxLength && value.length > validation.maxLength) {\r\n    errorsMessage = `${id} Required max length ${validation.maxLength}`;\r\n  }\r\n  if (validation.isString && typeof value !== \"string\") {\r\n    errorsMessage = `${id} is Not a Text`;\r\n  }\r\n  return errorsMessage;\r\n};\r\nexport const formatDateForQuery = date => {\r\n  const testDate = new Date(date);\r\n  return (\r\n    testDate.getFullYear() +\r\n    \"-\" +\r\n    (testDate.getMonth() + 1) +\r\n    \"-\" +\r\n    testDate.getDate()\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./Spinner.css\";\r\nconst Spinner = () => (\r\n  <div class='spinner-border text-primary' role='status'>\r\n    <span class='sr-only'>Loading...</span>\r\n  </div>\r\n);\r\nexport default Spinner;\r\n","import React from \"react\";\r\n\r\nimport \"./EmbedTweet.css\";\r\nconst EmbedTweet = ({ selectedTweet }) => {\r\n  return (\r\n    <div className='embedTweetWrapper'>\r\n      <div className='embedTweet' id='embedTweet'></div>\r\n    </div>\r\n  );\r\n};\r\nexport default EmbedTweet;\r\n","import React, { useState } from \"react\";\r\nimport \"./TwitterSearch.css\";\r\nimport TextInput from \"../Layout/TextInput\";\r\nimport DatePickerComponent from \"../Layout/DatePicker\";\r\nimport SelectInput from \"../Layout/SelectInput\";\r\nimport Button from \"../Layout/Button\";\r\nimport Table from \"../Layout/Table\";\r\nimport { api } from \"../../httpConfig\";\r\nimport twitterLogo from \"../../assets/twitter-logo.png\";\r\nimport { checkValidity, formatDateForQuery } from \"../../shared/utility\";\r\nimport Spinner from \"../Layout/Spinner\";\r\nimport EmbedTweet from \"../Layout/EmbedTweet\";\r\nconst TwitterSearchPage = ({ languages }) => {\r\n  const dateRange = {\r\n    minDate: new Date(Date.now() - 6 * 24 * 60 * 60 * 1000),\r\n    maxDate: new Date()\r\n  };\r\n  const [searchTwitterForm, setSearchTwitterForm] = useState({\r\n    startDate: dateRange.minDate\r\n  }); // init initialize form\r\n  const [tweets, setTweets] = useState([]); // init return tweets from api defualt empty array\r\n  const [noResult, setNoResult] = useState(false); // for ui boolean control\r\n  const [loading, setLoading] = useState(false);\r\n  const handleInputChange = (event, validation) => {\r\n    const { id, value } = event.target;\r\n\r\n    const errorsMessage = checkValidity(id, value, validation);\r\n    return setSearchTwitterForm({\r\n      ...searchTwitterForm,\r\n      [id]: { errorsMessage, value, isTouch: true }\r\n    });\r\n  };\r\n  const handleTimeChange = (date, id) =>\r\n    setSearchTwitterForm({ ...searchTwitterForm, [id]: date });\r\n\r\n  const handleTweetSearch = async () => {\r\n    setLoading(true);\r\n    const payload = {\r\n      hashtag: searchTwitterForm.hashtag,\r\n      startDate: formatDateForQuery(searchTwitterForm.startDate),\r\n      endDate: searchTwitterForm[\"endDate\"]\r\n        ? formatDateForQuery(searchTwitterForm.endDate)\r\n        : null,\r\n      reqData: [\"id_str\", \"text\", \"user\", \"created_at\", \"retweet_count\"],\r\n      language: searchTwitterForm.language\r\n    };\r\n    const request = {\r\n      url: \"tweeter/tweets\",\r\n      method: \"POST\",\r\n      payload\r\n    };\r\n    console.log(hashtag);\r\n\r\n    try {\r\n      if (\r\n        (typeof hashtag.value !== \"string\" || !hashtag.value.length) &&\r\n        typeof hashtag.value !== Number\r\n      ) {\r\n        return setNoResult(true);\r\n      }\r\n\r\n      const response = await api(request);\r\n      const { filteredTweets } = response[\"data\"];\r\n      if (filteredTweets.length) {\r\n        setTweets(filteredTweets);\r\n        setLoading(false);\r\n      } else {\r\n        setTweets([]);\r\n        setNoResult(true);\r\n        setLoading(false);\r\n      }\r\n    } catch (err) {\r\n      setTweets([]);\r\n      setLoading(false);\r\n      console.log(err);\r\n\r\n      throw err;\r\n    }\r\n  };\r\n  const handleTweetSelect = tweet => {\r\n    const tweetDom = document.getElementById(\"embedTweet\");\r\n    if (typeof tweet[\"id_str\"] === \"string\") {\r\n      tweetDom.innerHTML = \"\";\r\n      return window.twttr.widgets.createTweet(tweet[\"id_str\"], tweetDom, {\r\n        theme: \"dark\"\r\n      });\r\n    }\r\n  };\r\n  const languageChangeHandler = lang =>\r\n    setSearchTwitterForm({ ...searchTwitterForm, language: lang.value });\r\n  const createTweetsTable = tweets => {\r\n    return tweets.map(tweet => {\r\n      const tdArray = []; // IMPORTENT  CODE LINE 19 -40 NEED REFACTORED OUTSIDE OF THE VIEW\r\n      for (let key in tweet) {\r\n        switch (key) {\r\n          case \"user\":\r\n            tdArray[0] = <td key={tweet[key]}>{tweet[key]}</td>;\r\n            break;\r\n          case \"created_at\":\r\n            tdArray[1] = (\r\n              <td key={tweet[key]}>{formatDateForQuery(tweet[key])}</td>\r\n            );\r\n            break;\r\n          case \"text\":\r\n            tdArray[2] = <td key={tweet[key]}>{tweet[key]}</td>;\r\n            break;\r\n          case \"retweet_count\":\r\n            tdArray[3] = <td key={tweet[key]}>{tweet[key]}</td>;\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n      return (\r\n        <tr key={tweet[\"id_str\"]} onClick={() => handleTweetSelect(tweet)}>\r\n          {[...tdArray]}\r\n        </tr>\r\n      );\r\n    });\r\n  };\r\n  const { hashtag = \"\", startDate, endDate = null } = searchTwitterForm;\r\n  console.log(loading);\r\n\r\n  return (\r\n    <div className='twitterPageContainer'>\r\n      <div className='twitterPageTitle'>\r\n        <h4>Twitter Search App</h4>\r\n        <div className='logoWrapper'>\r\n          <img src={twitterLogo} alt='twitter-logo' />\r\n        </div>\r\n      </div>\r\n      <div className='formContainer'>\r\n        <form className='searchTweetsForm' onSubmit={e => e.preventDefault()}>\r\n          <div className='hashtagInputContainer'>\r\n            <TextInput\r\n              errorsMessage={hashtag.errorsMessage}\r\n              isTouch={hashtag ? hashtag.isTouch : false}\r\n              validation={{ isRequired: true, minLength: 1 }}\r\n              onChange={event =>\r\n                handleInputChange(event, { isRequired: true, minLength: 1 })\r\n              }\r\n              label='Hashtag'\r\n              placeholder='#'\r\n              id='hashtag'\r\n              type='text'\r\n              value={hashtag && hashtag.value}\r\n            />\r\n          </div>\r\n\r\n          <div className='dateContainer'>\r\n            <DatePickerComponent\r\n              minDate={dateRange.minDate}\r\n              maxDate={endDate ? endDate : dateRange.maxDate}\r\n              label='Start Date'\r\n              id='startDate'\r\n              handleTimeChange={date => handleTimeChange(date, \"startDate\")}\r\n              date={startDate}\r\n            />\r\n            <DatePickerComponent\r\n              minDate={startDate ? startDate : dateRange.minDate}\r\n              maxDate={dateRange.maxDate}\r\n              label='End Date'\r\n              id='endDate'\r\n              handleTimeChange={date => handleTimeChange(date, \"endDate\")}\r\n              date={endDate}\r\n            />\r\n          </div>\r\n          <div className='selectContainer'>\r\n            <div className='selectLang'>\r\n              <SelectInput\r\n                label='Language'\r\n                languageChangeHandler={languageChangeHandler}\r\n                languages={languages}\r\n              />\r\n            </div>\r\n            <div className='buttonContainer'>\r\n              <Button\r\n                loading={loading}\r\n                onClick={handleTweetSearch}\r\n                text='Search'\r\n              />\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n\r\n      {tweets.length ? (\r\n        <div className='tweetsContainer'>\r\n          <EmbedTweet />\r\n          <div className='tableContainer'>\r\n            <Table\r\n              formatDateForQuery={formatDateForQuery}\r\n              createTweetsTable={createTweetsTable}\r\n              onClick={handleTweetSelect}\r\n              tweets={tweets}\r\n            />\r\n          </div>\r\n        </div>\r\n      ) : noResult ? (\r\n        <div className='noTweets'>\r\n          <p>No Tweets Found Try Use Other Tags And Remove Filters</p>\r\n        </div>\r\n      ) : null}\r\n      {loading && (\r\n        <div className='spinnerContainer'>\r\n          <div className='spinnerWrapper'>\r\n            <Spinner />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default TwitterSearchPage;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport TwitterSearhPage from \"./Components/Pages/TwitterSearch\";\r\nimport languageJson from \"./assets/leng.json\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [languages, setLanguages] = useState([]); // languages for select component\r\n\r\n  // THIS USE EFFECT RUN ONCE ON APP BOOTSTRAP FOR PARSE LANG\r\n  useEffect(() => {\r\n    const languagesParse = JSON.parse(JSON.stringify(languageJson));\r\n    setLanguages(languagesParse);\r\n  }, []);\r\n  return (\r\n    <div className='appContainer'>\r\n      <TwitterSearhPage languages={languages} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\n\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n","module.exports = __webpack_public_path__ + \"static/media/twitter-logo.87dfb9b3.png\";"],"sourceRoot":""}