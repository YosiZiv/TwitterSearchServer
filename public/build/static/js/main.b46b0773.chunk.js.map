{"version":3,"sources":["Components/Layout/TextInput.js","Components/Layout/DatePicker.js","Components/Layout/SelectInput.js","Components/Layout/Button.js","Components/Layout/Table.js","httpConfig.js","shared/utility.js","Components/Layout/Spinner.js","Components/Layout/EmbedTweet.js","Components/Pages/TwitterSearch.js","App.js","index.js","assets/twitter-logo.png"],"names":["TextInput","className","id","label","placeholder","value","onChange","errorsMessage","required","isTouch","concat","autoComplete","DatePickerComponent","handleTimeChange","date","minDate","maxDate","dateFormat","selected","SelectInput","languages","languageChangeHandler","options","Button","text","onClick","loading","disabled","Table","tweets","createTweetsTable","width","selectTweet","axios","Axios","create","baseURL","api","a","url","method","params","payload","get","response","post","checkValidity","validation","isRequired","trim","minLength","length","maxLength","isString","formatDateForQuery","testDate","Date","getFullYear","getMonth","getDate","Spinner","role","EmbedTweet","handleTweetClose","tweetSelect","style","opacity","type","aria-label","aria-hidden","TwitterSearchPage","dateRange","now","useState","hashtag","startDate","endDate","language","searchTwitterForm","setSearchTwitterForm","setTweets","noResult","setNoResult","setLoading","setTweetSelect","handleTweetSearch","filters","request","handleTweetSelect","tweet","tweetDom","document","getElementById","innerHTML","window","twttr","widgets","createTweet","theme","src","twitterLogo","alt","onSubmit","e","preventDefault","event","target","handleInputChange","lang","map","tdArray","key","App","setLanguages","useEffect","languagesParse","JSON","parse","stringify","languageJson","ReactDOM","render","module","exports"],"mappings":"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","file":"static/js/main.b46b0773.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./TextInput.css\";\r\nconst TextInput = ({\r\n  id,\r\n  label,\r\n  placeholder,\r\n  value,\r\n  onChange,\r\n  errorsMessage = null,\r\n  required = false,\r\n  isTouch = false\r\n}) => {\r\n  let className;\r\n  className = `form-control`.concat(errorsMessage && isTouch ? ` invalid` : ``);\r\n  return (\r\n    <div className='inputwrapper'>\r\n      <label className='textLabel'>\r\n        {required && <span className='text-danger'>*</span>} {label} :\r\n      </label>\r\n      <input\r\n        autoComplete='off'\r\n        id={id}\r\n        value={value}\r\n        onChange={onChange}\r\n        placeholder={placeholder}\r\n        className={className}\r\n      />\r\n      <div className='text-input-error-message'>\r\n        {errorsMessage && (\r\n          <small className='text-danger'>{errorsMessage}</small>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default TextInput;\r\n","import React from \"react\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport \"./DatePicker.css\";\r\nconst DatePickerComponent = ({\r\n  handleTimeChange,\r\n  date,\r\n  minDate,\r\n  maxDate,\r\n  id,\r\n  label\r\n}) => (\r\n  <div className='datePickerContainer'>\r\n    <label className='textLabel'>{label} :</label>\r\n    <div className='datePicker'>\r\n      <DatePicker\r\n        minDate={minDate}\r\n        maxDate={maxDate}\r\n        dateFormat='yyyy/MM/dd'\r\n        id={id}\r\n        selected={date}\r\n        onChange={handleTimeChange}\r\n      />\r\n    </div>\r\n  </div>\r\n);\r\nexport default DatePickerComponent;\r\n","import React from \"react\";\r\nimport Select from \"react-select\";\r\n\r\nconst SelectInput = ({ languages, languageChangeHandler, label }) => {\r\n  return (\r\n    <>\r\n      <label className='textLabel'>{label} :</label>\r\n      <Select onChange={languageChangeHandler} options={languages} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SelectInput;\r\n","import React from \"react\";\r\nimport \"./Button.css\";\r\nconst Button = ({ text, onClick, loading }) => (\r\n  <button disabled={loading} className='button' onClick={onClick}>\r\n    {text}\r\n  </button>\r\n);\r\nexport default Button;\r\n","import React from \"react\";\r\nimport \"./Table.css\";\r\nconst Table = ({ tweets, onClick, createTweetsTable, selectTweet }) => {\r\n  const width = selectTweet ? \"minWidth\" : \"fullWidth\";\r\n  return (\r\n    <>\r\n      <table className={width}>\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Date</th>\r\n            <th>Body</th>\r\n            <th>Retweets</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>{createTweetsTable(tweets, onClick)}</tbody>\r\n      </table>\r\n    </>\r\n  );\r\n};\r\nexport default Table;\r\n","import Axios from \"axios\";\r\n\r\n// \"http://ec2-18-185-92-148.eu-central-1.compute.amazonaws.com/api\"  production server\r\nconst axios = Axios.create({\r\n  baseURL: \"http://localhost:4000/api\"\r\n});\r\nexport const api = async ({ url, method, params = null, payload = null }) => {\r\n  let response;\r\n  try {\r\n    if (method === \"GET\") {\r\n      response = await axios.get(url, { params: { ...params } });\r\n      return response;\r\n    } else {\r\n      response = await axios.post(url, payload);\r\n      return response;\r\n    }\r\n  } catch (err) {\r\n    throw err;\r\n  }\r\n};\r\n","export const checkValidity = (id, value, validation) => {\r\n  let errorsMessage = null;\r\n  if (!validation) {\r\n    return errorsMessage;\r\n  }\r\n\r\n  if (validation.isRequired && value.trim() === \"\") {\r\n    errorsMessage = `${id} field is require`;\r\n  }\r\n\r\n  if (validation.minLength && value.length < validation.minLength) {\r\n    errorsMessage = `${id} Required min ${validation.minLength}`;\r\n  }\r\n  if (validation.maxLength && value.length > validation.maxLength) {\r\n    errorsMessage = `${id} Required max length ${validation.maxLength}`;\r\n  }\r\n  if (validation.isString && typeof value !== \"string\") {\r\n    errorsMessage = `${id} is Not a Text`;\r\n  }\r\n  return errorsMessage;\r\n};\r\nexport const formatDateForQuery = date => {\r\n  const testDate = new Date(date);\r\n  return (\r\n    testDate.getFullYear() +\r\n    \"-\" +\r\n    (testDate.getMonth() + 1) +\r\n    \"-\" +\r\n    testDate.getDate()\r\n  );\r\n};\r\n\r\n// THIS FUNCTION NO LONGER NEED\r\n// export const createUrlParams = data => {\r\n//   let paramsUrl = \"?\";\r\n//   if (typeof data !== \"object\" && !Object.keys(data).length) {\r\n//     return null;\r\n//   }\r\n//   Object.entries(data).forEach(([key, value]) => {\r\n//     paramsUrl = paramsUrl + `${key}=${value}&`;\r\n\r\n//   });\r\n//   paramsUrl = paramsUrl.slice(0, -1);\r\n//   return paramsUrl;\r\n// };\r\n","import React from \"react\";\r\nconst Spinner = () => (\r\n  <div className='spinner-border text-primary' role='status'>\r\n    <span className='sr-only'>Loading...</span>\r\n  </div>\r\n);\r\nexport default Spinner;\r\n","import React from \"react\";\r\n\r\nimport \"./EmbedTweet.css\";\r\nconst EmbedTweet = ({ handleTweetClose, tweetSelect }) => {\r\n  return (\r\n    <div onClick={handleTweetClose} className='embedTweetWrapper'>\r\n      <button\r\n        onClick={handleTweetClose}\r\n        style={{ opacity: tweetSelect ? 1 : 0 }}\r\n        type='button'\r\n        className='close closeTweet'\r\n        aria-label='Close'\r\n      >\r\n        <span aria-hidden='true'>&times;</span>\r\n      </button>\r\n      <div className='embedTweet' id='embedTweet'></div>\r\n    </div>\r\n  );\r\n};\r\nexport default EmbedTweet;\r\n","import React, { useState } from \"react\";\r\nimport \"./TwitterSearch.css\";\r\nimport TextInput from \"../Layout/TextInput\";\r\nimport DatePickerComponent from \"../Layout/DatePicker\";\r\nimport SelectInput from \"../Layout/SelectInput\";\r\nimport Button from \"../Layout/Button\";\r\nimport Table from \"../Layout/Table\";\r\nimport { api } from \"../../httpConfig\";\r\nimport twitterLogo from \"../../assets/twitter-logo.png\";\r\nimport { checkValidity, formatDateForQuery } from \"../../shared/utility\";\r\nimport Spinner from \"../Layout/Spinner\";\r\nimport EmbedTweet from \"../Layout/EmbedTweet\";\r\n\r\nconst TwitterSearchPage = ({ languages }) => {\r\n  const dateRange = {\r\n    minDate: new Date(Date.now() - 6 * 24 * 60 * 60 * 1000),\r\n    maxDate: new Date()\r\n  };\r\n  const [searchTwitterForm, setSearchTwitterForm] = useState({\r\n    hashtag: {\r\n      value: \"\",\r\n      errorsMessage: null,\r\n      validation: { isRequired: true, minLength: 1 },\r\n      isTouch: false\r\n    },\r\n    startDate: dateRange.minDate,\r\n    endDate: dateRange.maxDate,\r\n    language: \"\"\r\n  }); // init initialize form\r\n  const [tweets, setTweets] = useState([]); // init return tweets from api defualt empty array\r\n  const [noResult, setNoResult] = useState(false); // for ui boolean control\r\n  const [loading, setLoading] = useState(false); // loading controller\r\n  const [tweetSelect, setTweetSelect] = useState(false);\r\n  const handleInputChange = (event, validation) => {\r\n    const { id, value } = event.target;\r\n\r\n    const errorsMessage = checkValidity(id, value, validation);\r\n    return setSearchTwitterForm({\r\n      ...searchTwitterForm,\r\n      [id]: { errorsMessage, value, isTouch: true, validation }\r\n    });\r\n  };\r\n  const handleTimeChange = (date, id) =>\r\n    setSearchTwitterForm({ ...searchTwitterForm, [id]: date });\r\n\r\n  const handleTweetSearch = async () => {\r\n    const { hashtag, startDate, endDate, language } = searchTwitterForm;\r\n    const errorsMessage = checkValidity(\r\n      \"hashtag\",\r\n      hashtag.value,\r\n      hashtag.validation\r\n    );\r\n    if (errorsMessage) {\r\n      return setSearchTwitterForm({\r\n        ...searchTwitterForm,\r\n        hashtag: { ...hashtag, errorsMessage }\r\n      });\r\n    }\r\n    const params = {\r\n      hashtag: hashtag.value,\r\n      startDate: formatDateForQuery(startDate),\r\n      endDate: formatDateForQuery(endDate),\r\n      filters: [\"id_str\", \"text\", \"user\", \"created_at\", \"retweet_count\"]\r\n    };\r\n    if (language.length) {\r\n      params.language = language;\r\n    }\r\n    const request = {\r\n      url: \"tweeter/hashtag\",\r\n      method: \"GET\",\r\n      params\r\n    };\r\n    try {\r\n      setLoading(true);\r\n      setTweets([]);\r\n      setNoResult(false);\r\n      const response = await api(request);\r\n      const { tweets } = response[\"data\"];\r\n      if (tweets.length) {\r\n        setTweets(tweets);\r\n        setLoading(false);\r\n      } else {\r\n        setTweets([]);\r\n        setNoResult(true);\r\n        setLoading(false);\r\n      }\r\n    } catch (err) {\r\n      setTweets([]);\r\n      setLoading(false);\r\n      setNoResult(true);\r\n      throw err;\r\n    }\r\n  };\r\n  const handleTweetSelect = tweet => {\r\n    const tweetDom = document.getElementById(\"embedTweet\");\r\n    if (typeof tweet[\"id_str\"] === \"string\") {\r\n      tweetDom.innerHTML = \"\";\r\n      setTweetSelect(true);\r\n      return window.twttr.widgets.createTweet(tweet[\"id_str\"], tweetDom, {\r\n        theme: \"dark\"\r\n      });\r\n    }\r\n  };\r\n  const handleTweetClose = () => {\r\n    document.getElementById(\"embedTweet\").innerHTML = \"\";\r\n    setTweetSelect(false);\r\n  };\r\n  const languageChangeHandler = lang =>\r\n    setSearchTwitterForm({ ...searchTwitterForm, language: lang.value });\r\n\r\n  const createTweetsTable = tweets => {\r\n    // CREATE AND ORDER TABLE ROW FUNCTION\r\n    return tweets.map(tweet => {\r\n      const tdArray = [];\r\n      for (let key in tweet) {\r\n        switch (key) {\r\n          case \"user\":\r\n            tdArray[0] = <td key={tweet[key]}>{tweet[key]}</td>;\r\n            break;\r\n          case \"created_at\":\r\n            tdArray[1] = (\r\n              <td key={tweet[key]}>{formatDateForQuery(tweet[key])}</td>\r\n            );\r\n            break;\r\n          case \"text\":\r\n            tdArray[2] = <td key={tweet[key]}>{tweet[key]}</td>;\r\n            break;\r\n          case \"retweet_count\":\r\n            tdArray[3] = <td key={tweet[key]}>{tweet[key]}</td>;\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n      // RETURN EVERY TWEET AS A ROW OF DATA\r\n      return (\r\n        <tr key={tweet[\"id_str\"]} onClick={() => handleTweetSelect(tweet)}>\r\n          {[...tdArray]}\r\n        </tr>\r\n      );\r\n    });\r\n  };\r\n  const { hashtag, startDate, endDate } = searchTwitterForm;\r\n  return (\r\n    <>\r\n      <div className='twitterPageTitle'>\r\n        <h4>Twitter Search App</h4>\r\n        <div className='logoWrapper'>\r\n          <img src={twitterLogo} alt='twitter-logo' />\r\n        </div>\r\n      </div>\r\n      <div className='formContainer'>\r\n        <form className='searchTweetsForm' onSubmit={e => e.preventDefault()}>\r\n          <div className='hashtagInputContainer'>\r\n            <TextInput\r\n              errorsMessage={hashtag.errorsMessage}\r\n              isTouch={hashtag ? hashtag.isTouch : false}\r\n              validation={hashtag.validation}\r\n              onChange={event =>\r\n                handleInputChange(event, { isRequired: true, minLength: 1 })\r\n              }\r\n              label='Hashtag'\r\n              placeholder='#'\r\n              id='hashtag'\r\n              type='text'\r\n              value={hashtag && hashtag.value}\r\n            />\r\n          </div>\r\n          <div className='dateContainer'>\r\n            <DatePickerComponent\r\n              minDate={dateRange.minDate}\r\n              maxDate={endDate ? endDate : dateRange.maxDate}\r\n              label='Start Date'\r\n              id='startDate'\r\n              handleTimeChange={date => handleTimeChange(date, \"startDate\")}\r\n              date={startDate}\r\n            />\r\n            <DatePickerComponent\r\n              minDate={startDate ? startDate : dateRange.minDate}\r\n              maxDate={dateRange.maxDate}\r\n              label='End Date'\r\n              id='endDate'\r\n              handleTimeChange={date => handleTimeChange(date, \"endDate\")}\r\n              date={endDate}\r\n            />\r\n          </div>\r\n          <div className='selectContainer'>\r\n            <div className='selectLang'>\r\n              <SelectInput\r\n                label='Language'\r\n                languageChangeHandler={languageChangeHandler}\r\n                languages={languages}\r\n              />\r\n            </div>\r\n            <div className='buttonContainer'>\r\n              <Button\r\n                loading={loading}\r\n                onClick={handleTweetSearch}\r\n                text='Search'\r\n              />\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n\r\n      {tweets.length ? (\r\n        <div className='tweetsContainer'>\r\n          <EmbedTweet\r\n            handleTweetClose={handleTweetClose}\r\n            tweetSelect={tweetSelect}\r\n          />\r\n          <div className='tableContainer'>\r\n            <Table\r\n              formatDateForQuery={formatDateForQuery}\r\n              createTweetsTable={createTweetsTable}\r\n              onClick={handleTweetSelect}\r\n              tweets={tweets}\r\n            />\r\n          </div>\r\n        </div>\r\n      ) : noResult ? (\r\n        <div className='noTweets'>\r\n          <p>No Tweets Found Try Use Other Tags And Remove Filters</p>\r\n        </div>\r\n      ) : null}\r\n      {loading && (\r\n        <div className='spinnerContainer'>\r\n          <div className='spinnerWrapper'>\r\n            <Spinner />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default TwitterSearchPage;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport TwitterSearhPage from \"./Components/Pages/TwitterSearch\";\r\nimport languageJson from \"./assets/leng.json\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [languages, setLanguages] = useState([]); // languages for select component\r\n\r\n  // THIS USE EFFECT RUN ONCE ON APP BOOTSTRAP FOR PARSE LANG\r\n  useEffect(() => {\r\n    const languagesParse = JSON.parse(JSON.stringify(languageJson));\r\n    setLanguages(languagesParse);\r\n  }, []);\r\n  return (\r\n    <div className='appContainer'>\r\n      <TwitterSearhPage languages={languages} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\n\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n","module.exports = __webpack_public_path__ + \"static/media/twitter-logo.87dfb9b3.png\";"],"sourceRoot":""}