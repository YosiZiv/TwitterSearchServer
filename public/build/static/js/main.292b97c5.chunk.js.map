{"version":3,"sources":["Components/Layout/TextInput.js","Components/Layout/DatePicker.js","Components/Layout/SelectInput.js","Components/Layout/Button.js","Components/Layout/Table.js","api.js","Components/Pages/TwitterSearch.js","App.js","serviceWorker.js","index.js"],"names":["TextInput","props","id","type","required","defaultValue","disabled","error","handleInputChange","className","value","onChange","placeholder","autoComplete","DatePickerComponent","handleTimeChange","date","dateFormat","selected","SelectInput","languages","console","log","options","Button","color","text","onClick","style","Table","axios","Axios","create","baseURL","headers","authorization","api","a","url","method","payload","get","response","post","TwitterSearchPage","Date","useState","searchTwitterForm","setSearchTwitterForm","tweets","setTweets","hashtags","startDate","setDate","getDate","endDate","lang","handleTweetSearch","request","data","filteredTweets","length","onSubmit","e","preventDefault","target","App","setLanguages","useEffect","languageObject","JSON","parse","stringify","languageJson","languageArray","Object","values","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.292b97c5.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst TextInput = props => {\r\n  const {\r\n    id,\r\n    type,\r\n    required,\r\n    defaultValue,\r\n    disabled,\r\n    error,\r\n    handleInputChange\r\n  } = props;\r\n\r\n  return (\r\n    <>\r\n      <h6>\r\n        <label className='m-0'>\r\n          {id}: {required && <span className='text-danger'>*</span>}\r\n        </label>\r\n      </h6>\r\n      <input\r\n        id={id}\r\n        type={type}\r\n        value={defaultValue}\r\n        disabled={disabled}\r\n        onChange={handleInputChange}\r\n        placeholder={`Enter ${id}`}\r\n        autoComplete='off'\r\n        className='form-control'\r\n      />\r\n      <div className='text-input-error-message'>\r\n        {error && <small className='text-danger'>{error}</small>}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default TextInput;\r\n","import React from \"react\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport \"./DatePicker.css\";\r\nconst DatePickerComponent = ({ handleTimeChange, date, id }) => (\r\n  <div>\r\n    <h6>\r\n      <label className='m-0'>{id}</label>\r\n    </h6>\r\n    <div className='datePicker'>\r\n      <DatePicker\r\n        dateFormat='yyyy/MM/dd'\r\n        id={id}\r\n        selected={date}\r\n        onChange={handleTimeChange}\r\n      />\r\n    </div>\r\n  </div>\r\n);\r\nexport default DatePickerComponent;\r\n","import React, { useState } from \"react\";\r\nimport Select from \"react-select\";\r\n\r\nconst SelectInput = ({ languages }) => {\r\n  console.log(languages);\r\n\r\n  const selectCountry = val => {\r\n    this.setState({ country: val });\r\n  };\r\n\r\n  const selectRegion = val => {\r\n    this.setState({ region: val });\r\n  };\r\n  return <Select options={languages} />;\r\n};\r\nexport default SelectInput;\r\n","import React from \"react\";\r\nimport \"./Button.css\";\r\nconst Button = ({ color, text, onClick }) => (\r\n  <button style={color} className='button' onClick={onClick}>\r\n    {text}\r\n  </button>\r\n);\r\nexport default Button;\r\n","import React from \"react\";\r\n\r\nconst Table = () => (\r\n  <div>\r\n    <h1>table component</h1>\r\n  </div>\r\n);\r\nexport default Table;\r\n","import Axios from \"axios\";\r\n\r\nconst axios = Axios.create({\r\n  baseURL: \"http://localhost:4000/api\",\r\n  headers: {\r\n    authorization:\r\n      \"Bearer AAAAAAAAAAAAAAAAAAAAAJqnCgEAAAAAcpmOZJcEfBgZmzOtalQIVQFdbBQ%3DdX5kMtwko0gZvY0AuWJGSWfYVYZ1QQEh6dSN9gVGTw3HVoBaFe\"\r\n  }\r\n});\r\nconsole.log(axios);\r\n\r\nexport const api = async ({ url, method, payload = null }) => {\r\n  console.log(url, method, payload);\r\n  let response;\r\n  try {\r\n    if (method === \"GET\") {\r\n      response = await axios.get(url, payload);\r\n      return response;\r\n    } else {\r\n      response = await axios.post(url, payload);\r\n      return response;\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n","import React, { useState } from \"react\";\r\nimport \"./TwitterSearch.css\";\r\nimport TextInput from \"../Layout/TextInput\";\r\nimport DatePickerComponent from \"../Layout/DatePicker\";\r\nimport SelectInput from \"../Layout/SelectInput\";\r\nimport Button from \"../Layout/Button\";\r\nimport Table from \"../Layout/Table\";\r\nimport { api } from \"../../api\";\r\nconst TwitterSearchPage = ({ languages }) => {\r\n  const date = new Date();\r\n  const [searchTwitterForm, setSearchTwitterForm] = useState({});\r\n  const [tweets, setTweets] = useState(null);\r\n  // const [initDate, setInitDate] = useState(new Date());\r\n  const {\r\n    hashtags = \"\",\r\n    startDate = date.setDate(date.getDate() - 7),\r\n    endDate = null,\r\n    lang = null\r\n  } = searchTwitterForm;\r\n  const handleInputChange = e => {\r\n    const {\r\n      target: { id, value }\r\n    } = e;\r\n    return setSearchTwitterForm({ ...searchTwitterForm, [id]: value });\r\n  };\r\n  const handleTimeChange = (date, id) => {\r\n    console.log(\"function work 2 \", date, id);\r\n\r\n    setSearchTwitterForm({ ...searchTwitterForm, [id]: date });\r\n  };\r\n  console.log(hashtags);\r\n  const handleTweetSearch = async () => {\r\n    const method = \"POST\";\r\n    const url = `tweeter/tweets`;\r\n    const request = {\r\n      url,\r\n      method,\r\n      payload: searchTwitterForm\r\n    };\r\n    try {\r\n      const response = await api(request);\r\n      console.log(response.data);\r\n      const { filteredTweets } = response[\"data\"];\r\n      if (filteredTweets.length) {\r\n        return setTweets(filteredTweets);\r\n      } else {\r\n        return setTweets(\"Couldnt found any tweets\");\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  console.log(tweets);\r\n\r\n  return (\r\n    <div className='twitterPageContainer'>\r\n      <div className='twitterPageTitle'>\r\n        <h4 className='m-2 text-center'>Twitter Search App</h4>\r\n      </div>\r\n\r\n      <form className='formContainer' onSubmit={e => e.preventDefault()}>\r\n        <div>\r\n          <TextInput\r\n            handleInputChange={handleInputChange}\r\n            id='hashtags'\r\n            type='text'\r\n            defaultValue={hashtags}\r\n          />\r\n        </div>\r\n\r\n        <div className='d-flex'>\r\n          <DatePickerComponent\r\n            id='startDate'\r\n            handleTimeChange={date => handleTimeChange(date, \"startDate\")}\r\n            date={startDate}\r\n          />\r\n          <DatePickerComponent\r\n            id='endDate'\r\n            handleTimeChange={date => handleTimeChange(date, \"startDate\")}\r\n            date={endDate}\r\n          />\r\n        </div>\r\n        <div>\r\n          <SelectInput languages={languages} />\r\n        </div>\r\n        <div className='buttonContainer'>\r\n          <Button onClick={handleTweetSearch} text='Search' />\r\n        </div>\r\n      </form>\r\n\r\n      {tweets && (\r\n        <div className='tableContainer'>\r\n          <Table />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default TwitterSearchPage;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport TwitterSearhPage from \"./Components/Pages/TwitterSearch\";\r\nimport languageJson from \"./assets/leng.json\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [languages, setLanguages] = useState(null);\r\n\r\n  useEffect(() => {\r\n    console.log(\"IMPORTENT$$$$$$$$$$$$$$$$\");\r\n    const languageObject = JSON.parse(JSON.stringify(languageJson));\r\n    const languageArray = Object.values(languageObject);\r\n    setLanguages(languageArray);\r\n  }, []);\r\n\r\n  return (\r\n    <div className='container'>\r\n      <TwitterSearhPage languages={languages} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}