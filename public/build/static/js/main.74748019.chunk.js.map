{"version":3,"sources":["Components/Layout/TextInput.js","Components/Layout/DatePicker.js","Components/Layout/SelectInput.js","Components/Layout/Button.js","Components/Layout/Table.js","httpConfig.js","shared/utility.js","Components/Pages/TwitterSearch.js","App.js","index.js","assets/twitter-logo.png"],"names":["TextInput","className","id","label","placeholder","value","onChange","errorsMessage","required","isTouch","concat","autoComplete","DatePickerComponent","handleTimeChange","date","minDate","maxDate","dateFormat","selected","SelectInput","languages","languageChangeHandler","options","Button","color","text","onClick","loading","disabled","style","Table","tweets","createTweetsTable","axios","Axios","create","baseURL","api","a","url","method","payload","get","response","post","formatDateForQuery","testDate","Date","getFullYear","getMonth","getDate","TwitterSearchPage","dateRange","now","useState","startDate","searchTwitterForm","setSearchTwitterForm","setTweets","noResult","setNoResult","setLoading","handleTweetSearch","console","log","hashtag","endDate","reqData","language","request","length","Number","filteredTweets","handleTweetSelect","tweet","tweetDom","document","getElementById","innerHTML","window","twttr","widgets","createTweet","theme","src","twitterLogo","onSubmit","e","preventDefault","validation","isRequired","minLength","event","target","trim","maxLength","isString","checkValidity","handleInputChange","type","lang","map","tdArray","key","marginTop","textAlign","App","setLanguages","useEffect","languagesParsh","JSON","parse","stringify","languageJson","ReactDOM","render","fallback","module","exports"],"mappings":"oTAmCeA,G,YAjCG,SAAC,GASZ,IACDC,EATJC,EAQI,EARJA,GACAC,EAOI,EAPJA,MACAC,EAMI,EANJA,YACAC,EAKI,EALJA,MACAC,EAII,EAJJA,SAII,IAHJC,qBAGI,MAHY,KAGZ,MAFJC,gBAEI,aADJC,QAIA,OADAR,EAAY,eAAeS,OAAOH,SAF9B,UAE8B,eAEhC,yBAAKN,UAAU,gBACb,2BAAOA,UAAU,aACdO,GAAY,0BAAMP,UAAU,eAAhB,KADf,IACwDE,EADxD,MAGA,2BACEQ,aAAa,MACbT,GAAIA,EACJG,MAAOA,EACPC,SAAUA,EACVF,YAAaA,EACbH,UAAWA,IAEb,yBAAKA,UAAU,4BACZM,GACC,2BAAON,UAAU,eAAeM,O,iBCH3BK,G,YAtBa,SAAC,GAAD,IAC1BC,EAD0B,EAC1BA,iBACAC,EAF0B,EAE1BA,KACAC,EAH0B,EAG1BA,QACAC,EAJ0B,EAI1BA,QACAd,EAL0B,EAK1BA,GACAC,EAN0B,EAM1BA,MAN0B,OAQ1B,yBAAKF,UAAU,uBACb,2BAAOA,UAAU,aAAaE,EAA9B,MACA,yBAAKF,UAAU,cACb,kBAAC,IAAD,CACEc,QAASA,EACTC,QAASA,EACTC,WAAW,aACXf,GAAIA,EACJgB,SAAUJ,EACVR,SAAUO,Q,QCTHM,EATK,SAAC,GAAiD,IAA/CC,EAA8C,EAA9CA,UAAWC,EAAmC,EAAnCA,sBAAuBlB,EAAY,EAAZA,MACvD,OACE,oCACE,2BAAOF,UAAU,aAAaE,EAA9B,MACA,kBAAC,IAAD,CAAQG,SAAUe,EAAuBC,QAASF,MCAzCG,G,OALA,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAMC,EAAhB,EAAgBA,QAASC,EAAzB,EAAyBA,QAAzB,OACb,4BAAQC,SAAUD,EAASE,MAAOL,EAAOvB,UAAU,SAASyB,QAASA,GAClED,KCeUK,G,OAjBD,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,OAAQL,EAAiC,EAAjCA,QAASM,EAAwB,EAAxBA,kBAChC,OACE,oCACE,+BACE,+BACE,4BACE,oCACA,oCACA,oCACA,0CAGJ,+BAAQA,EAAkBD,EAAQL,Q,QCXpCO,E,OAAQC,EAAMC,OAAO,CACzBC,QAAS,oEAEEC,EAAG,uCAAG,qCAAAC,EAAA,yDAASC,EAAT,EAASA,IAAKC,EAAd,EAAcA,OAAd,IAAsBC,eAAtB,MAAgC,KAAhC,WAGA,QAAXD,EAHW,gCAIIP,EAAMS,IAAIH,EAAKE,GAJnB,cAIbE,EAJa,yBAKNA,GALM,wBAOIV,EAAMW,KAAKL,EAAKE,GAPpB,eAObE,EAPa,yBAQNA,GARM,+HAAH,sD,iBCeHE,EAAqB,SAAA/B,GAChC,IAAMgC,EAAW,IAAIC,KAAKjC,GAC1B,OACEgC,EAASE,cACT,KACCF,EAASG,WAAa,GACvB,IACAH,EAASI,WCgMEC,EAlNW,SAAC,GAAmB,IAAjB/B,EAAgB,EAAhBA,UACrBgC,EAAY,CAChBrC,QAAS,IAAIgC,KAAKA,KAAKM,MAAQ,QAC/BrC,QAAS,IAAI+B,MAH4B,EAKOO,mBAAS,CACzDC,UAAWH,EAAUrC,UANoB,mBAKpCyC,EALoC,KAKjBC,EALiB,OAQfH,mBAAS,IARM,mBAQpCvB,EARoC,KAQ5B2B,EAR4B,OASXJ,oBAAS,GATE,mBASpCK,EAToC,KAS1BC,EAT0B,OAUbN,oBAAS,GAVI,mBAUpC3B,EAVoC,KAU3BkC,EAV2B,KAoBrChD,EAAmB,SAACC,EAAMZ,GAAP,OACvBuD,EAAqB,eAAKD,EAAN,eAA0BtD,EAAKY,MAE/CgD,EAAiB,uCAAG,kCAAAxB,EAAA,yDACxByB,QAAQC,IAAI,UACZJ,GAAY,GACZF,EAAU,IACJjB,EAAU,CACdwB,QAAST,EAAkBS,QAC3BV,UAAWV,EAAmBW,EAAkBD,WAChDW,QAASV,EAAiB,QACtBX,EAAmBW,EAAkBU,SACrC,KACJC,QAAS,CAAC,SAAU,OAAQ,OAAQ,aAAc,iBAClDC,SAAUZ,EAAkBY,UAExBC,EAAU,CACd9B,IAAK,iBACLC,OAAQ,OACRC,WAEFsB,QAAQC,IAAIC,GAlBY,SAsBM,kBAAlBA,EAAQ5D,OAAuB4D,EAAQ5D,MAAMiE,eAC9CL,EAAQ5D,QAAUkE,OAvBL,yCAyBbX,GAAY,IAzBC,cA2BtBC,GAAW,GA3BW,UA4BCxB,EAAIgC,GA5BL,WA4BhB1B,EA5BgB,SA6Bd6B,EAAmB7B,EAAQ,KAA3B6B,gBACWF,OA9BG,wBA+BpBT,GAAW,GA/BS,kBAgCbH,EAAUc,IAhCG,eAkCpBX,GAAW,GACXH,EAAU,IAnCU,kBAoCbE,GAAY,IApCC,gEAuCtBC,GAAW,GACXH,EAAU,IACVK,QAAQC,IAAR,MAzCsB,+DAAH,qDA8CjBS,EAAoB,SAAAC,GACxB,IAAMC,EAAWC,SAASC,eAAe,cACzC,GAA+B,kBAApBH,EAAK,OAEd,OADAC,EAASG,UAAY,GACdC,OAAOC,MAAMC,QAAQC,YAAYR,EAAK,OAAYC,EAAU,CACjEQ,MAAO,UA1E8B,EAsHvC3B,EAJFS,eAlHyC,MAkH/B,GAlH+B,EAmHzCV,EAGEC,EAHFD,UAnHyC,EAsHvCC,EAFFU,eApHyC,MAoH/B,KApH+B,EAsHvCV,EADFY,SAGF,OACE,yBAAKnE,UAAU,wBACb,yBAAKA,UAAU,oBACb,kDACA,yBAAKA,UAAU,eACb,yBAAKmF,IAAKC,QAGd,yBAAKpF,UAAU,iBACb,0BAAMA,UAAU,mBAAmBqF,SAAU,SAAAC,GAAC,OAAIA,EAAEC,mBAClD,yBAAKvF,UAAU,yBACb,kBAAC,EAAD,CACEM,cAAe0D,EAAQ1D,cACvBE,UAASwD,GAAUA,EAAQxD,QAC3BgF,WAAY,CAAEC,YAAY,EAAMC,UAAW,GAC3CrF,SAAU,SAAAsF,GAAK,OA5HD,SAACA,EAAOH,GAAgB,IAAD,EACzBG,EAAMC,OAApB3F,EADuC,EACvCA,GAAIG,EADmC,EACnCA,MAENE,EDxBmB,SAACL,EAAIG,EAAOoF,GACvC,IAAIlF,EAAgB,KACpB,OAAKkF,GAIDA,EAAWC,YAA+B,KAAjBrF,EAAMyF,SACjCvF,EAAa,UAAML,EAAN,sBAGXuF,EAAWE,WAAatF,EAAMiE,OAASmB,EAAWE,YACpDpF,EAAa,UAAML,EAAN,yBAAyBuF,EAAWE,YAE/CF,EAAWM,WAAa1F,EAAMiE,OAASmB,EAAWM,YACpDxF,EAAa,UAAML,EAAN,gCAAgCuF,EAAWM,YAEtDN,EAAWO,UAA6B,kBAAV3F,IAChCE,EAAa,UAAML,EAAN,mBAERK,GAhBEA,ECqBe0F,CAAc/F,EAAIG,EAAOoF,GAC/C,OAAOhC,EAAqB,eACvBD,EADsB,eAExBtD,EAAK,CAAEK,gBAAeF,QAAOI,SAAS,MAuH7ByF,CAAkBN,EAAO,CAAEF,YAAY,EAAMC,UAAW,KAE1DxF,MAAM,UACNC,YAAY,IACZF,GAAG,UACHiG,KAAK,OACL9F,MAAO4D,GAAWA,EAAQ5D,SAI9B,yBAAKJ,UAAU,iBACb,kBAAC,EAAD,CACEc,QAASqC,EAAUrC,QACnBC,QAASkD,GAAoBd,EAAUpC,QACvCb,MAAM,aACND,GAAG,YACHW,iBAAkB,SAAAC,GAAI,OAAID,EAAiBC,EAAM,cACjDA,KAAMyC,IAER,kBAAC,EAAD,CACExC,QAASwC,GAAwBH,EAAUrC,QAC3CC,QAASoC,EAAUpC,QACnBb,MAAM,WACND,GAAG,UACHW,iBAAkB,SAAAC,GAAI,OAAID,EAAiBC,EAAM,YACjDA,KAAMoD,KAGV,yBAAKjE,UAAU,mBACb,yBAAKA,UAAU,cACb,kBAAC,EAAD,CACEE,MAAM,WACNkB,sBAzFgB,SAAA+E,GAC5BrC,QAAQC,IAAIoC,GAEZ3C,EAAqB,eAAKD,EAAN,eAA0B,WAAa4C,EAAK/F,UAuFpDe,UAAWA,KAGf,yBAAKnB,UAAU,mBACb,kBAAC,EAAD,CACE0B,QAASA,EACTD,QAASoC,EACTrC,KAAK,eAOdM,EAAOuC,OACN,yBAAKrE,UAAU,mBACb,yBAAKA,UAAU,kBACb,kBAAC,EAAD,CACE4C,mBAAoBA,EACpBb,kBAxGc,SAAAD,GACxB,OAAOA,EAAOsE,KAAI,SAAA3B,GAChB,IAAM4B,EAAU,GAChB,IAAK,IAAIC,KAAO7B,EACd,OAAQ6B,GACN,IAAK,OACHD,EAAQ,GAAK,wBAAIC,IAAK7B,EAAM6B,IAAO7B,EAAM6B,IACzC,MACF,IAAK,aACHD,EAAQ,GACN,wBAAIC,IAAK7B,EAAM6B,IAAO1D,EAAmB6B,EAAM6B,KAEnD,IAAK,OACHD,EAAQ,GAAK,wBAAIC,IAAK7B,EAAM6B,IAAO7B,EAAM6B,IACzC,MACF,IAAK,gBACHD,EAAQ,GAAK,wBAAIC,IAAK7B,EAAM6B,IAAO7B,EAAM6B,IAM/C,OACE,wBAAIA,IAAK7B,EAAK,OAAYhD,QAAS,kBAAM+C,EAAkBC,KAA3D,UACO4B,QAiFD5E,QAAS+C,EACT1C,OAAQA,KAGZ,yBAAK9B,UAAU,qBACb,yBAAKA,UAAU,aAAaC,GAAG,iBAGjCyD,EACF,yBAAK1D,UAAU,YACb,qFAEA,KACH0B,GACC,yBAAKE,MAAO,CAAE2E,UAAW,OAAQC,UAAW,WAC1C,2D,eCjMKC,MAhBf,WAAgB,IAAD,EACqBpD,mBAAS,IAD9B,mBACNlC,EADM,KACKuF,EADL,KASb,OANAC,qBAAU,WACR,IAAMC,EAAiBC,KAAKC,MAAMD,KAAKE,UAAUC,IACjDlD,QAAQC,IAAI6C,GACZF,EAAaE,KACZ,IACH9C,QAAQC,IAAI5C,GAEV,yBAAKnB,UAAU,gBACb,kBAAC,EAAD,CAAkBmB,UAAWA,MCVnC8F,IAASC,OACP,kBAAC,WAAD,CAAUC,SAAU,6CAClB,kBAAC,EAAD,OAEFxC,SAASC,eAAe,U,mBCV1BwC,EAAOC,QAAU,IAA0B,0C","file":"static/js/main.74748019.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./TextInput.css\";\r\nconst TextInput = ({\r\n  id,\r\n  label,\r\n  placeholder,\r\n  value,\r\n  onChange,\r\n  errorsMessage = null,\r\n  required = false,\r\n  isTouch = false\r\n}) => {\r\n  let className;\r\n  className = `form-control`.concat(errorsMessage && isTouch ? ` invalid` : ``);\r\n  return (\r\n    <div className='inputwrapper'>\r\n      <label className='textLabel'>\r\n        {required && <span className='text-danger'>*</span>} {label} :\r\n      </label>\r\n      <input\r\n        autoComplete='off'\r\n        id={id}\r\n        value={value}\r\n        onChange={onChange}\r\n        placeholder={placeholder}\r\n        className={className}\r\n      />\r\n      <div className='text-input-error-message'>\r\n        {errorsMessage && (\r\n          <small className='text-danger'>{errorsMessage}</small>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default TextInput;\r\n","import React from \"react\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport \"./DatePicker.css\";\r\nconst DatePickerComponent = ({\r\n  handleTimeChange,\r\n  date,\r\n  minDate,\r\n  maxDate,\r\n  id,\r\n  label\r\n}) => (\r\n  <div className='datePickerContainer'>\r\n    <label className='textLabel'>{label} :</label>\r\n    <div className='datePicker'>\r\n      <DatePicker\r\n        minDate={minDate}\r\n        maxDate={maxDate}\r\n        dateFormat='yyyy/MM/dd'\r\n        id={id}\r\n        selected={date}\r\n        onChange={handleTimeChange}\r\n      />\r\n    </div>\r\n  </div>\r\n);\r\nexport default DatePickerComponent;\r\n","import React, { useState } from \"react\";\r\nimport Select from \"react-select\";\r\n\r\nconst SelectInput = ({ languages, languageChangeHandler, label }) => {\r\n  return (\r\n    <>\r\n      <label className='textLabel'>{label} :</label>\r\n      <Select onChange={languageChangeHandler} options={languages} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SelectInput;\r\n","import React from \"react\";\r\nimport \"./Button.css\";\r\nconst Button = ({ color, text, onClick, loading }) => (\r\n  <button disabled={loading} style={color} className='button' onClick={onClick}>\r\n    {text}\r\n  </button>\r\n);\r\nexport default Button;\r\n","import React from \"react\";\r\nimport \"./Table.css\";\r\nconst Table = ({ tweets, onClick, createTweetsTable }) => {\r\n  return (\r\n    <>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Date</th>\r\n            <th>Body</th>\r\n            <th>Retweets</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>{createTweetsTable(tweets, onClick)}</tbody>\r\n      </table>\r\n    </>\r\n  );\r\n};\r\nexport default Table;\r\n","import Axios from \"axios\";\r\n\r\n// \"http://localhost:4000/api\"\r\nconst axios = Axios.create({\r\n  baseURL: \"http://ec2-18-185-92-148.eu-central-1.compute.amazonaws.com/api\"\r\n});\r\nexport const api = async ({ url, method, payload = null }) => {\r\n  let response;\r\n  try {\r\n    if (method === \"GET\") {\r\n      response = await axios.get(url, payload);\r\n      return response;\r\n    } else {\r\n      response = await axios.post(url, payload);\r\n      return response;\r\n    }\r\n  } catch (err) {\r\n    throw err;\r\n  }\r\n};\r\n","export const checkValidity = (id, value, validation) => {\r\n  let errorsMessage = null;\r\n  if (!validation) {\r\n    return errorsMessage;\r\n  }\r\n\r\n  if (validation.isRequired && value.trim() === \"\") {\r\n    errorsMessage = `${id} field is require`;\r\n  }\r\n\r\n  if (validation.minLength && value.length < validation.minLength) {\r\n    errorsMessage = `${id} Required min ${validation.minLength}`;\r\n  }\r\n  if (validation.maxLength && value.length > validation.maxLength) {\r\n    errorsMessage = `${id} Required max length ${validation.maxLength}`;\r\n  }\r\n  if (validation.isString && typeof value !== \"string\") {\r\n    errorsMessage = `${id} is Not a Text`;\r\n  }\r\n  return errorsMessage;\r\n};\r\nexport const formatDateForQuery = date => {\r\n  const testDate = new Date(date);\r\n  return (\r\n    testDate.getFullYear() +\r\n    \"-\" +\r\n    (testDate.getMonth() + 1) +\r\n    \"-\" +\r\n    testDate.getDate()\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport \"./TwitterSearch.css\";\r\nimport TextInput from \"../Layout/TextInput\";\r\nimport DatePickerComponent from \"../Layout/DatePicker\";\r\nimport SelectInput from \"../Layout/SelectInput\";\r\nimport Button from \"../Layout/Button\";\r\nimport Table from \"../Layout/Table\";\r\nimport { api } from \"../../httpConfig\";\r\nimport twitterLogo from \"../../assets/twitter-logo.png\";\r\nimport { checkValidity, formatDateForQuery } from \"../../shared/utility\";\r\nconst TwitterSearchPage = ({ languages }) => {\r\n  const dateRange = {\r\n    minDate: new Date(Date.now() - 6 * 24 * 60 * 60 * 1000),\r\n    maxDate: new Date()\r\n  };\r\n  const [searchTwitterForm, setSearchTwitterForm] = useState({\r\n    startDate: dateRange.minDate\r\n  }); // init initialize form\r\n  const [tweets, setTweets] = useState([]);\r\n  const [noResult, setNoResult] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const handleInputChange = (event, validation) => {\r\n    const { id, value } = event.target;\r\n\r\n    const errorsMessage = checkValidity(id, value, validation);\r\n    return setSearchTwitterForm({\r\n      ...searchTwitterForm,\r\n      [id]: { errorsMessage, value, isTouch: true }\r\n    });\r\n  };\r\n  const handleTimeChange = (date, id) =>\r\n    setSearchTwitterForm({ ...searchTwitterForm, [id]: date });\r\n\r\n  const handleTweetSearch = async () => {\r\n    console.log(\"INSIDE\");\r\n    setNoResult(false);\r\n    setTweets([]);\r\n    const payload = {\r\n      hashtag: searchTwitterForm.hashtag,\r\n      startDate: formatDateForQuery(searchTwitterForm.startDate),\r\n      endDate: searchTwitterForm[\"endDate\"]\r\n        ? formatDateForQuery(searchTwitterForm.endDate)\r\n        : null,\r\n      reqData: [\"id_str\", \"text\", \"user\", \"created_at\", \"retweet_count\"],\r\n      language: searchTwitterForm.language\r\n    };\r\n    const request = {\r\n      url: \"tweeter/tweets\",\r\n      method: \"POST\",\r\n      payload\r\n    };\r\n    console.log(hashtag);\r\n\r\n    try {\r\n      if (\r\n        (typeof hashtag.value !== \"string\" || !hashtag.value.length) &&\r\n        typeof hashtag.value !== Number\r\n      ) {\r\n        return setNoResult(true);\r\n      }\r\n      setLoading(true);\r\n      const response = await api(request);\r\n      const { filteredTweets } = response[\"data\"];\r\n      if (filteredTweets.length) {\r\n        setLoading(false);\r\n        return setTweets(filteredTweets);\r\n      } else {\r\n        setLoading(false);\r\n        setTweets([]);\r\n        return setNoResult(true);\r\n      }\r\n    } catch (err) {\r\n      setLoading(false);\r\n      setTweets([]);\r\n      console.log(err);\r\n\r\n      throw err;\r\n    }\r\n  };\r\n  const handleTweetSelect = tweet => {\r\n    const tweetDom = document.getElementById(\"embedTweet\");\r\n    if (typeof tweet[\"id_str\"] === \"string\") {\r\n      tweetDom.innerHTML = \"\";\r\n      return window.twttr.widgets.createTweet(tweet[\"id_str\"], tweetDom, {\r\n        theme: \"dark\"\r\n      });\r\n    }\r\n    return;\r\n  };\r\n  const languageChangeHandler = lang => {\r\n    console.log(lang);\r\n\r\n    setSearchTwitterForm({ ...searchTwitterForm, [\"language\"]: lang.value });\r\n  };\r\n  const createTweetsTable = tweets => {\r\n    return tweets.map(tweet => {\r\n      const tdArray = []; // IMPORTENT  CODE LINE 19 -40 NEED REFACTORED OUTSIDE OF THE VIEW\r\n      for (let key in tweet) {\r\n        switch (key) {\r\n          case \"user\":\r\n            tdArray[0] = <td key={tweet[key]}>{tweet[key]}</td>;\r\n            break;\r\n          case \"created_at\":\r\n            tdArray[1] = (\r\n              <td key={tweet[key]}>{formatDateForQuery(tweet[key])}</td>\r\n            );\r\n          case \"text\":\r\n            tdArray[2] = <td key={tweet[key]}>{tweet[key]}</td>;\r\n            break;\r\n          case \"retweet_count\":\r\n            tdArray[3] = <td key={tweet[key]}>{tweet[key]}</td>;\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n      return (\r\n        <tr key={tweet[\"id_str\"]} onClick={() => handleTweetSelect(tweet)}>\r\n          {[...tdArray]}\r\n        </tr>\r\n      );\r\n    });\r\n  };\r\n  const {\r\n    hashtag = \"\",\r\n    startDate,\r\n    endDate = null,\r\n    language = null\r\n  } = searchTwitterForm;\r\n\r\n  return (\r\n    <div className='twitterPageContainer'>\r\n      <div className='twitterPageTitle'>\r\n        <h4>Twitter Search App</h4>\r\n        <div className='logoWrapper'>\r\n          <img src={twitterLogo} />\r\n        </div>\r\n      </div>\r\n      <div className='formContainer'>\r\n        <form className='searchTweetsForm' onSubmit={e => e.preventDefault()}>\r\n          <div className='hashtagInputContainer'>\r\n            <TextInput\r\n              errorsMessage={hashtag.errorsMessage}\r\n              isTouch={hashtag ? hashtag.isTouch : false}\r\n              validation={{ isRequired: true, minLength: 1 }}\r\n              onChange={event =>\r\n                handleInputChange(event, { isRequired: true, minLength: 1 })\r\n              }\r\n              label='Hashtag'\r\n              placeholder='#'\r\n              id='hashtag'\r\n              type='text'\r\n              value={hashtag && hashtag.value}\r\n            />\r\n          </div>\r\n\r\n          <div className='dateContainer'>\r\n            <DatePickerComponent\r\n              minDate={dateRange.minDate}\r\n              maxDate={endDate ? endDate : dateRange.maxDate}\r\n              label='Start Date'\r\n              id='startDate'\r\n              handleTimeChange={date => handleTimeChange(date, \"startDate\")}\r\n              date={startDate}\r\n            />\r\n            <DatePickerComponent\r\n              minDate={startDate ? startDate : dateRange.minDate}\r\n              maxDate={dateRange.maxDate}\r\n              label='End Date'\r\n              id='endDate'\r\n              handleTimeChange={date => handleTimeChange(date, \"endDate\")}\r\n              date={endDate}\r\n            />\r\n          </div>\r\n          <div className='selectContainer'>\r\n            <div className='selectLang'>\r\n              <SelectInput\r\n                label='Language'\r\n                languageChangeHandler={languageChangeHandler}\r\n                languages={languages}\r\n              />\r\n            </div>\r\n            <div className='buttonContainer'>\r\n              <Button\r\n                loading={loading}\r\n                onClick={handleTweetSearch}\r\n                text='Search'\r\n              />\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n\r\n      {tweets.length ? (\r\n        <div className='tweetsContainer'>\r\n          <div className='tableContainer'>\r\n            <Table\r\n              formatDateForQuery={formatDateForQuery}\r\n              createTweetsTable={createTweetsTable}\r\n              onClick={handleTweetSelect}\r\n              tweets={tweets}\r\n            />\r\n          </div>\r\n          <div className='embedTweetWrapper'>\r\n            <div className='embedTweet' id='embedTweet'></div>\r\n          </div>\r\n        </div>\r\n      ) : noResult ? (\r\n        <div className='noTweets'>\r\n          <p>No Tweets Found Try Use Other Tags And Remove Filters</p>\r\n        </div>\r\n      ) : null}\r\n      {loading && (\r\n        <div style={{ marginTop: \"20px\", textAlign: \"center\" }}>\r\n          <h1>LOADING..... PLEASE WAIT</h1>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default TwitterSearchPage;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport TwitterSearhPage from \"./Components/Pages/TwitterSearch\";\r\nimport languageJson from \"./assets/leng.json\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [languages, setLanguages] = useState([]); // languages for select component\r\n\r\n  useEffect(() => {\r\n    const languagesParsh = JSON.parse(JSON.stringify(languageJson));\r\n    console.log(languagesParsh);\r\n    setLanguages(languagesParsh);\r\n  }, []);\r\n  console.log(languages);\r\n  return (\r\n    <div className='appContainer'>\r\n      <TwitterSearhPage languages={languages} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n// const languageArray = JSON.parse(JSON.stringify(languageJson));\r\n// // select component expect Array as input this method return array\r\n// // console.log(languagesObject);\r\n// // const languageArray = Object.values(languagesObject);\r\n// setLanguages(languageArray);\r\n","import React, { Suspense } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\n\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <Suspense fallback={<div>Loading ~~~</div>}>\r\n    <App />\r\n  </Suspense>,\r\n  document.getElementById(\"root\")\r\n);\r\n","module.exports = __webpack_public_path__ + \"static/media/twitter-logo.87dfb9b3.png\";"],"sourceRoot":""}